import {
	TRANSFORM_FEEDBACK,
	TRANSFORM_FEEDBACK_BINDING
} from "../constants/constants.js";
import type Context from "./Context.js";
import ContextDependent from "./internal/ContextDependent.js";
import type Program from "./Program.js";

/**
 * A transform feedback; used to capture primitives generated by the vertex processing step and record data from those primitives (varyings) into buffer objects.
 * @internal
 */
export default class TransformFeedback extends ContextDependent {
	/**
	 * The currently-bound transform feedback cache.
	 * @internal
	 */
	private static bindingsCache = new Map<
		WebGL2RenderingContext,
		WebGLTransformFeedback | null
	>();

	/**
	 * Get the currently-bound transform feedback.
	 * @param context - The rendering context.
	 * @internal
	 */
	public static getBound(context: Context): WebGLTransformFeedback | null {
		// Get the bound transform feedback.
		let boundTf = TransformFeedback.bindingsCache.get(context.gl);
		if (typeof boundTf === "undefined") {
			boundTf = context.doPrefillCache
				? null
				: (context.gl.getParameter(
						TRANSFORM_FEEDBACK_BINDING
					) as WebGLTransformFeedback | null);
			TransformFeedback.bindingsCache.set(context.gl, boundTf);
		}

		return boundTf;
	}

	/**
	 * Bind a transform feedback.
	 * @param context - The rendering context.
	 * @param tf - The transform feedback.
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindTransformFeedback | bindTransformFeedback}
	 * @internal
	 */
	public static bindGl(
		context: Context,
		tf: WebGLTransformFeedback | null
	): void {
		// Do nothing if the binding is already correct.
		if (TransformFeedback.getBound(context) === tf) {
			return;
		}

		// Bind the transform feedback.
		context.gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);
		TransformFeedback.bindingsCache.set(context.gl, tf);
	}

	/**
	 * Unbind the transform feedback that is bound.
	 * @param context - The rendering context.
	 * @param tf - The transform feedback to unbind, or `undefined` to unbind any transform feedback.
	 * @internal
	 */
	public static unbindGl(context: Context, tf?: WebGLTransformFeedback): void {
		// Do nothing if the transform feedback is already unbound.
		if (tf && TransformFeedback.getBound(context) !== tf) {
			return;
		}

		// Unbind the transform feedback.
		TransformFeedback.bindGl(context, null);
	}

	/**
	 * Create a transform feedback.
	 * @param program - The program to create the transform feedback for.
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createTransformFeedback | createTransformFeedback}
	 */
	public constructor(program: Program) {
		super(program.context);
		this.program = program;

		this.internal = this.gl.createTransformFeedback();

		// TODO
	}

	/** The shader program associated with this transform feedback. */
	public readonly program: Program;

	/**
	 * The API interface of this transform feedback.
	 * @internal
	 */
	public readonly internal: WebGLTransformFeedback;
}
